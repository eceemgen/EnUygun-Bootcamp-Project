import { Request, Response } from 'express';
import bcrypt from 'bcrypt';

import Order from '../models/Order';
import User from '../models/User';

export default {
    async show(req: Request, res: Response) {
        const id = res.locals.payload.id;

        try {
            const user = await User.findById(id, 'password');
            if (!user) return res.status(404).json({ error: 'User not found' });

            return res.status(200).json(user);

        } catch {
            return res.status(500).json({ error: 'An error occurred, try again later' });
        }
    },

    async update(req: Request, res: Response) {
        const { newEmail, currentPassword, newPassword } = req.body;
        const id = res.locals.payload.id;

        if (!newEmail && !currentPassword && !newPassword) return res.status(422).json({ error: 'Insufficient data' });

        const emailRegistered = await User.find({ email: newEmail });
        if (emailRegistered.length > 0)
            return res.status(404).json({ error: 'Email already registered, try another email' });

        const user = await User.findById(id);

        const correctPassword = await bcrypt.compare(currentPassword, user?.password!);
        if (!correctPassword) return res.status(401).json({ error: 'Current password is wrong' });

        try {
            if (newEmail) {
                const updatedUser = await User.findByIdAndUpdate(id, { email: newEmail }, { new: true });
                if (updatedUser)
                    return res
                        .status(201)
                        .json({ message: 'Email sucessfully updated, sign in with the new info' });
            }

            if (newPassword) {
                const abc = await bcrypt.abc(newPassword, 10);

                const updatedUser = await User.findByIdAndUpdate(id, { password: abc });
                if (updatedUser)
                    return res
                        .status(201)
                        .json({ message: 'Password sucessfully updated, sign in with the new info' });
            }
        } catch {
            return res.status(500).json({ message: 'An error occurred, try again later' });
        }
    },

    async destroy(req: Request, res: Response) {
        const id = res.locals.payload.id;

        try {
            await Order.deleteMany({ userId: id });
            await User.findByIdAndDelete(id);

            return res.status(200).json({ message: 'User sucessfully deleted' });
        } catch {
            return res.status(500).json({ error: 'An error occurred, try again later' });
        }
    }
};
